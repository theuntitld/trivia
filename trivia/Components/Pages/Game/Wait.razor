@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using trivia.Icons

@if (Player is not null)
{
    <section class="play-page @RulesOpenClass waiting-stage @(Player.Page == State.Pages.Play && this.GameState.Stage == -1 ? "show" : "")">
        <button class="btn btn-warning" @onclick="() => {Player.Page = State.Pages.CategoryPicker; this.GameState.StateChanged();}">Back</button>
        <div class="wait-message">
            <div class="loading-icon">
                <LoadingIcon/>
            </div>
            <h3>
                The game has<br />
                not started yet
            </h3>
            <div>Please be patient :]</div>
        </div>


        <div class="team">
            <div>You’re on team</div>
            <div class="team-name">[ @Player.Team?.ToUpper() ]</div>
        </div>

        @* <button class="btn btn-info" @onclick="() => {Player.PreviousPage = State.Pages.Play; Player.Page = State.Pages.Rules; this.GameState.StateChanged();}">Show Rules</button> *@

        <div class="rules" @onclick="ToggleRules">
            <div class="divider"></div>
            <RulesIcon Light="@(RulesOpenClass != string.Empty)" />
            <div class="rules-hint">
                Maybe read the rules<br />
                while you wait?
            </div>
        </div>
    
    </section>
}

@code {

    [Parameter]
    public State.Player Player { get; set; } = default!;

    [Parameter]
    public State.Game GameState { get; set; } = default!;

    string RulesOpenClass = "";

    void ToggleRules()
    {
        RulesOpenClass = RulesOpenClass == string.Empty ? "rules-open" : string.Empty;
    }
}
