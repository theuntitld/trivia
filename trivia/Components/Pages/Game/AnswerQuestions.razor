@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage

@if (Player is not null)
{
    <section class="play-page question-stage @(Player.Page == State.Pages.Play && this.GameState.Stage > -1 && this.GameState.Stage < this.GameState.Questions.Count ? "show" : "")">

        <div class="scores">
            <h4><span>My Score</span> @Player.Score</h4>
            <h4><span>Team</span> @Player.Team</h4>
        </div>

        <div style="position:relative;">
            @for (var i = 0; i < this.GameState.Questions.Count; i++)
            {
                var question = this.GameState.Questions[i];

                <div class="question @(this.GameState.Stage == i ? "show" : "")">

                    <div class="q-detail">
                        <span>@question.Category</span>
                        <span>Q@((GameState.Stage + 1).ToString("00"))</span>
                    </div>

                    <h4 class="question-text">@question.Question</h4>
                    
                    @if (!this.GameState.QuestionIsShowing)
                    {
                        this.Player.Answers.TryGetValue(this.GameState.Stage, out string? playerAnswer);
                        var stageEnded = this.GameState.CorrectAnswerIsShowing;

                        <div class="_progress">
                            <div style="width: @((double) this.GameState.RemainingSecondForStage / (double) (this.GameState.SecondsPerStage) * (double) 100)%"></div>
                        </div>

                        <div class="answers">

                            @foreach (var answer in new List<string> { "A", "B", "C", "D" })
                            {
                                var isActive = playerAnswer == answer;
                                var isCorrect = stageEnded && question.Answer == answer;
                                var isWrong = isActive && !isCorrect && stageEnded;
                                @* var isCorrectSelected = isCorrect && isActive; *@

                                var isActiveClass = isActive ? "active" : string.Empty;
                                var isCorrectClass = isCorrect ? "correct" : string.Empty;
                                var isWrongClass = isWrong ? "wrong" : string.Empty;
                                @* var isCorrectSelectedClass = isCorrectSelected ? "wrong" : string.Empty; *@

                                <button class="untitld-button type-two @isActiveClass @isCorrectClass @isWrongClass"
                                        disabled="@this.GameState.CorrectAnswerIsShowing"
                                        @onclick="@(() => this.GameState.AnswerQuestion(this.Player, this.GameState.Stage, answer))">
                                    @answer - @question.GetType().GetProperty(answer)?.GetValue(question)

                                    @if (stageEnded)
                                    {
                                        <div class="button-info">
                                            <div>@GameState.Players.Where(x => x.Answers.ContainsKey(this.GameState.Stage) && x.Answers[this.GameState.Stage] == answer).Count()</div>
                                            <div></div>
                                        </div>
                                    }
                                </button>
                            }
                        </div>
                    }
                </div>
            }
        </div>

    </section>
}

@code {

    [Parameter]
    public State.Player Player { get; set; } = default!;

    [Parameter]
    public State.Game GameState { get; set; } = default!;

    string Test(bool condition, string className)
    {
        return condition ? className : string.Empty;
    }
}
