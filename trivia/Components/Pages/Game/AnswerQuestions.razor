@using Microsoft.AspNetCore.Components.Server.ProtectedBrowserStorage
@using trivia.Icons

@if (Player is not null)
{
    <section class="play-page question-stage @(Player.Page == State.Pages.Play && this.GameState.Stage > -1 && this.GameState.Stage < this.GameState.Questions.Count ? "show" : "")">

        <header>
            <div class="header-content">
                <div class="player-name back-button">
                    @Player.Name
                </div>

                <div class="logo-small"><UntitldIcon Color="#CDFE00"/></div>
            </div>
        </header>


        <div class="content">
            <div class="scores">
                @{
                    var teamColor = Misc.GetTeam(Player.Team).Color;
                }
                <h4><span>My Score</span> @Player.Score.FlatScore</h4>
                <h4>
                    <span>Team</span>
                    <span class="team-score-color" style="background-color: @(teamColor ?? "");"></span>
                    <span>@(string.IsNullOrWhiteSpace(Player.Team) ? "" : this.GameState.TeamScore[Player.Team].FlatScore)</span>
                </h4>
            </div>

            <div class="question-wrapper">
                @for (var i = 0; i < this.GameState.Questions.Count; i++)
                {
                    var question = this.GameState.Questions[i];
                    this.Player.Answers.TryGetValue(this.GameState.Stage, out string? playerAnswer);
                    var stageEnded = this.GameState.CorrectAnswerIsShowing;
                    var showStageClass = this.GameState.Stage == i ? "show" : string.Empty;
                    var showingAnswersClass = this.GameState.QuestionIsShowing ? string.Empty : "small";
                    var stageHasEndedClass = stageEnded ? "ended" : string.Empty;

                    <div class="question @showStageClass @showingAnswersClass @stageHasEndedClass">

                        <div class="q-detail">
                            <span>@question.Category</span>
                            <span>Q@((GameState.Stage + 1).ToString("00"))</span>
                        </div>

                        <h4 class="question-text">@question.Question</h4>

                        <div class="answers-wrapper ">
                            @{
                                var width = this.GameState.Stage == i && !this.GameState.QuestionIsShowing
                                    ? ((double)this.GameState.RemainingSecondForStage - 1.0) / (double)this.GameState.SecondsPerStage * 100.0
                                    : 100.0;
                            }
                            <div class="_progress">
                                <div style="width: @width%"></div>
                            </div>

                            <div class="answers">

                                @foreach (var answer in new List<string> { "A", "B", "C", "D" })
                                {
                                    var isActive = playerAnswer == answer;
                                    var isCorrect = stageEnded && question.Answer == answer;
                                    var isWrong = isActive && !isCorrect && stageEnded;

                                    var isActiveClass = isActive ? "active" : string.Empty;
                                    var isCorrectClass = isCorrect ? "correct" : string.Empty;
                                    var isWrongClass = isWrong ? "wrong" : string.Empty;

                                    <button class="untitld-button type-two @(this.GameState.QuestionIsShowing ? "" : "show") @isActiveClass @isCorrectClass @isWrongClass"
                                            disabled="@this.GameState.CorrectAnswerIsShowing"
                                            @onclick="@(() => this.GameState.AnswerQuestion(this.Player, this.GameState.Stage, answer))">
                                        @answer - @question.GetType().GetProperty(answer)?.GetValue(question)

                                        @if (stageEnded)
                                        {
                                            <div class="button-info">
                                                <div>@GameState.Players.Where(x => x.Answers.ContainsKey(this.GameState.Stage) && x.Answers[this.GameState.Stage] == answer).Count()</div>
                                                <div class="button-icon-feedback"></div>
                                            </div>
                                        }
                                    </button>
                                }
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>

    </section>
}

@code {

    [Parameter]
    public State.Player Player { get; set; } = default!;

    [Parameter]
    public State.Game GameState { get; set; } = default!;

    string Test(bool condition, string className)
    {
        return condition ? className : string.Empty;
    }
}
