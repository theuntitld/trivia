@using trivia.Icons

<section class="play-page @(GameState.Stage > -1 ? "show" : "")">

    <div class="header">
        <div class="logo">
            <UntitldFullIcon Width="160" Height="80" Light /> TRIVIA
        </div>

        <div class="wait-message">
             Question @((GameState.Stage + 1).ToString("00"))
        </div>
    </div>

    <div class="body">

        <div class="player-scores">
            <h3>Scoreboard</h3>

            <div class="scores">
                @* @for (var i = 1; i <= 30; i++)
                {
                    <div class="score">
                        <span>#@i.ToString("00")</span>
                        <span>Player</span>
                        <span>1300</span>
                    </div>
                }
 *@
                 @{
                    var players = this.GameState.Players.Where(x => !string.IsNullOrWhiteSpace(x.Name) && x.Online);
                }
                @for (var i = 0; i < players.Count(); i++)
                {
                    var player = players.ElementAt(i);
                    <div class="score">
                        <span>#@((i + 1).ToString("00"))</span>
                        <span>@player.Name</span>
                        <span>@player.Score.FlatScore</span>
                    </div>
                }
            </div>
        </div>

        <div class="team-scores">
            <h3>Team Score</h3>

            <div class="scores">
                @foreach (var team in this.GameState.TeamScore.Keys)
                {
                    var color = Misc.GetTeam(team).Color;

                    var teamPlayersCount = (double)this.GameState.Players.Where(x => x.Team == team).Count();
                    var maxScore = teamPlayersCount * this.GameState.Questions.Count * 123.0;
                    var score = (double)this.GameState.TeamScore[team].FlatScore;
                    var scorePercent = teamPlayersCount < 1 ? 0 : score / maxScore * 100;

                    <div class="team-score" style="color: @color;">
                        <div>
                            <span>@team</span>
                            <span>@((Int32)scorePercent)%</span>
                        </div>
                        <div class="score-bar" style="border-color: @color;">
                            <div style="transition:0.4s; background-color: @color;width: @scorePercent%;"></div>
                        </div>
                    </div>
                }
            </div>
        </div>
         @* Game Left:
        <div style="width:@(
        GameState.SecondsSinceGameStart == 0 ? 100 :
        (1.0 - ((double) GameState.SecondsSinceGameStart / (double) (GameState.Questions.Count * GameState.SecondsPerStage))) * 100)%" class="progress">
        </div> *@


        
    </div>

    <div class="crowd-score">
        <h3>Wisdon of the crowd</h3>
        <div class="score-bar">
            @{
                var playersCount = (double)this.GameState.Players.Count();
                var maxCrowdScore = playersCount * this.GameState.Questions.Count  * 123.0;
                var crowdScore = (double)this.GameState.WisdomOfTheCrowd.FlatScore;
                var crowdScorePercent = playersCount < 1 ? 0 : crowdScore / maxCrowdScore * 100;
            }
            <div style="transition:0.4s; width: @(crowdScorePercent)%">@((Int32)crowdScorePercent)%</div>
        </div>
    </div>
    
</section>

@code {
    [Parameter]
    public State.Game GameState { get; set; } = default!;
}